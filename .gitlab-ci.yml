# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
# variables:
#   PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.

stages:
  - test
  - build
  - deploy

sonarqube-check:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

build:
   stage: build
   image: quay.io/podman/stable:latest
   before_script:
     - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
     - podman build -t $IMAGE_TAG .
     - podman push $IMAGE_TAG $CI_PUSH_URL
   only:
     - main

deploy:
  stage: deploy
  image: docker.io/debian:stable
  environment: production
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    - chmod 600 /builds/awaly/receptionist.tmp/SSH_PRIVATE_KEY

    #    ##
    # ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    # ## We're using tr to fix line endings which makes ed25519 keys work
    # ## without extra base64 encoding.
    # ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    # ##
    # # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - echo "${SSH_PRIVATE_KEY}" | ssh-add -
    - ssh-add $SSH_PRIVATE_KEY
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id
  script:
    - ssh -i /builds/awaly/receptionist.tmp/SSH_PRIVATE_KEY -T "$SSH_USER"@"$SSH_HOST"
    - systemctl --user start podman-auto-update.service
  only: 
    - main

